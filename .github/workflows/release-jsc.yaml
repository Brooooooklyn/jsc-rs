name: Release JavaScriptCore and ICU

on:
  push:
    branches: [release]
    tags-ignore:
      - '**'
env:
  MACOSX_DEPLOYMENT_TARGET: '10.15'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/brooooooklyn/jsc-rs/linux-builder:x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/brooooooklyn/jsc-rs/linux-builder:aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.settings.os }}
    name: Build ${{ matrix.settings.target }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.os.target }}
        if: ${{ !matrix.settings.docker }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.settings.target }}-cargo-cache

      - name: Install tools on macOS
        run: brew install ninja
        if: matrix.settings.os == 'macos-latest'

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest
        if: matrix.settings.os == 'macos-latest'

      - name: Install tools on Windows
        run: |
          choco install ninja -y
          which clang-cl
          C:/msys64/usr/bin/bash -lc "pacman -Syuu --noconfirm"
          C:/msys64/usr/bin/bash -lc "pacman -S make --noconfirm"
        if: matrix.settings.os == 'windows-latest'

      - name: Set MSYS path
        run: echo "c:/msys64/usr/bin" >> $GITHUB_PATH
        shell: bash
        if: matrix.settings.os == 'windows-latest'

      - name: Build JavaScriptCore
        shell: cmd
        run: |
          ls -R c:/msys64/usr/bin
          call "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvarsall.bat" x64 -vcvars_ver=14.29.30133
          sh -c "which cl"
          cargo xtask build
          cat icu/icu4c/source/config.log
          cargo build --bin tyr --release
          cp target/release/tyr.exe ./tyr-bin.exe
          cargo xtask release --target ${{ matrix.settings.target }}
        if: matrix.settings.os == 'windows-latest'
        env:
          GNU_MAKE_PATH: 'c:/msys64/usr/bin/make.exe'
          GNU_SH_PATH: 'c:/msys64/usr/bin/sh.exe'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build JavaScriptCore
        run: |
          cargo xtask build
          cargo build --bin tyr --release
          cp target/release/tyr ./tyr-bin
          cargo xtask release --target ${{ matrix.settings.target }}
        if: matrix.settings.os == 'macos-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build JavaScriptCore in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -e GITHUB_TOKEN -v ${{ github.workspace }}:/build -w /build'
          run: >-
            pwd &&
            rustup toolchain install $(cat ./rust-toolchain) &&
            rustup target add ${{ matrix.settings.target }} &&
            rm -f /usr/lib/llvm-14/lib/libc++abi.so &&
            rm -f /usr/aarch64-unknown-linux-gnu/lib/llvm-14/lib/libc++abi.so &&
            cargo run --bin xtask --target x86_64-unknown-linux-gnu -- build &&
            ls -R WebKit/WebKitBuild/lib &&
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=clang &&
            cargo build --target ${{ matrix.settings.target }} --bin tyr --release &&
            cp target/${{ matrix.settings.target }}/release/tyr ./tyr-bin &&
            cargo run --bin xtask --target x86_64-unknown-linux-gnu -- release --target ${{ matrix.settings.target }}

      - name: Cat CMake error log
        if: ${{ failure() }}
        run: cat ./WebKit/WebKitBuild/CMakeFiles/CMakeError.log

  build-linux-musl:
    name: Build ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64-unknown-linux-musl]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.target }}-cargo-cache

      - name: Build JavaScriptCore in docker
        uses: addnab/docker-run-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          image: ghcr.io/brooooooklyn/jsc-rs/linux-builder:x64-musl
          options: '--user 0:0 -e GITHUB_TOKEN -v ${{ github.workspace }}:/build -w /build'
          run: >-
            pwd &&
            rustup toolchain install $(cat ./rust-toolchain) &&
            rustup target add ${{ matrix.target }} &&
            apk add lld openssl-dev ruby perl &&
            unset RUSTFLAGS &&
            cargo run --bin xtask --target x86_64-unknown-linux-musl -- build &&
            ls -R WebKit/WebKitBuild/lib &&
            cargo build --target ${{ matrix.target }} --bin tyr --release &&
            cp target/${{ matrix.target }}/release/tyr ./tyr-bin &&
            cargo run --bin xtask --target x86_64-unknown-linux-musl -- release --target ${{ matrix.target }}

      - name: Cat CMake error log
        if: ${{ failure() }}
        run: cat ./WebKit/WebKitBuild/CMakeFiles/CMakeError.log
